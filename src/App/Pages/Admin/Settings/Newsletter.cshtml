@page
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["newsletter"];
}

<style>
    .card-email a {
        float: right;
    }
    .card-email {
        margin: 2px;
    }
</style>
<div id="app" class="bf-main" style="display:none">
    <partial name="~/Pages/Admin/Shared/_Taskbar.cshtml" />
    <div class="bf-body">
        <div class="bf-content">

            <label class="form-group-label">@Localizer["newsletter-subscribers"]</label>
            <div id="importMsgs"></div>
            <div class="row">
                <div v-for="(item, index) in emails" class="col-4 card card-email">
                    <div class="card-body">
                        {{ item.email }} <a href="#" v-on:click="remove(item.email)"><i class="fa fa-times"></i></a>
                    </div>
                </div>
            </div>

            <div v-if="emails && emails.length === 0" class="bf-list-empty">
                @Localizer["not-found"]!
            </div>

            <!-- Pagination -->
            <ul v-if="emails && emails.length > 0" class="bf-pagination d-flex">
                <li v-if="pager.showOlder" class="bf-pagination-item">
                    <a class="bf-pagination-link" title="older" :href="pagelink('older')">
                        <i class="bf-pagination-icon fa fa-chevron-left"></i>
                    </a>
                </li>
                <li v-if="pager.showNewer" class="bf-pagination-item">
                    <a class="bf-pagination-link" title="newer" :href="pagelink('newer')">
                        <i class="bf-pagination-icon fa fa-chevron-right"></i>
                    </a>
                </li>
                <li class="bf-pagination-item">
                    <span class="bf-pagination-count">
                        {{ cntFrom }}-{{ cntTo }} out of {{ pager.total }}
                    </span>
                </li>
            </ul>
            <!--/Pagination -->

        </div>
    </div>
</div>

@section Scripts{
    <script>
        new Vue({
            el: "#app",
            data: {
                emails: [],
                pager: {},
                page: 1,
                cntFrom: 0,
                cntTo: 0
            },
            methods: {
                load: function (page) {
                    axios.get(webRoot + 'api/notifications/subscriptions?page=' + page)
                        .then(response => {
                            this.emails = response.data.emails;
                            this.pager = response.data.pager;

                            this.cntFrom = this.pager.currentPage == 1 ? 1 : (this.pager.currentPage - 1) * this.pager.itemsPerPage + 1;
                            this.cntTo = this.pager.currentPage * this.pager.itemsPerPage < this.pager.total ? this.pager.currentPage * this.pager.itemsPerPage : this.pager.total;
                            $('#app').fadeIn();
                        })
                        .catch(function (error) { toastr.error(error); });
                },
                remove: function (email) {
                    var result = confirm("Please confirm removing this theme");
                    if (result) {
                        axios.put(webRoot + 'api/notifications/unsubscribe?email=' + email)
                            .then(response => {
                                toastr.success('Removed');
                                setTimeout(function () { location.reload(); }, 1000);
                            })
                            .catch(function (error) { toastr.error(error); });
                    }
                    return false;
                },
                pagelink: function (direction) {
                    var link = 'newsletter?page=';
                    if (direction === 'older') {
                        link += this.pager.older;
                    }
                    else {
                        link += this.pager.newer;
                    }
                    return link;
                }
            },
            beforeMount() {
                this.page = 1;
                if(fromQueryString('page')){ this.page = fromQueryString('page'); }
                this.load(this.page)
            }
        })
    </script>
}